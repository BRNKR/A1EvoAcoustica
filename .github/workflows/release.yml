name: Create Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "package.json"

jobs:
  # Job 1: Determine if a release is needed, handle versioning, and manage Git tags.
  determine_release_action:
    name: Determine Release Action & Prepare Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.get_version_info.outputs.new_version }}
      should_release: ${{ steps.get_version_info.outputs.should_release }}
      tag_name: ${{ steps.get_version_info.outputs.tag_name }}
      commit_sha: ${{ github.sha }}

    steps:      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags
          fetch-tags: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Version Info and Determine Release Action
        id: get_version_info
        run: |
          echo "Event type: ${{ github.event_name }}"
          current_version=$(jq -r .version package.json || echo "")          if [ -z "$current_version" ]; then
            echo "::error file=package.json::Could not extract current version from package.json."
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Current package.json version: $current_version"

          # Fetch all tags and get the latest one
          git fetch --tags
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1 || echo "")

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "$latest_tag" ]; then
            # Extract version number from latest tag (remove 'v' prefix)
            latest_version=${latest_tag#v}
            echo "Latest tag version: $latest_version"
            echo "Package.json version: $current_version"

            # Compare versions using sort -V (version sort)
            if [ "$(printf '%s\n%s' "$current_version" "$latest_version" | sort -V | tail -n 1)" = "$latest_version" ]; then
              echo "Found newer tag $latest_tag. Using it for the build."
              TAG_NAME="$latest_tag"
              echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
              echo "new_version=$latest_version" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
              # Checkout the tag to ensure we build from its commit
              git checkout "$latest_tag"
            else
              echo "No newer tag found. Using package.json version."
              TAG_NAME="v$current_version"
              echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
              echo "new_version=$current_version" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
            fi
          else # Push event or no newer tag
            echo "Push event. Checking for version change."
            previous_version=$(git show HEAD~1:package.json 2>/dev/null | jq -r .version || echo "")
            echo "Previous package.json version: $previous_version"

            if [ "$current_version" != "$previous_version" ]; then
              echo "Version changed from '$previous_version' to '$current_version'. Proceeding with release."
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "Version '$current_version' has not changed. No release will be created for this push."
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Prepare Tag & Handle Existing Release (on manual dispatch)
        if: steps.get_version_info.outputs.should_release == 'true' && github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME_ENV: ${{ steps.get_version_info.outputs.tag_name }}
        run: |
          echo "Manual dispatch: Managing tag $TAG_NAME_ENV and any existing release."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "Checking for existing GitHub release for tag $TAG_NAME_ENV and deleting if found..."
          if gh release view "$TAG_NAME_ENV" --repo "$GITHUB_REPOSITORY" > /dev/null 2>&1; then
            echo "Existing release for tag $TAG_NAME_ENV found. Deleting it..."
            gh release delete "$TAG_NAME_ENV" --repo "$GITHUB_REPOSITORY" --yes
            echo "Existing release for tag $TAG_NAME_ENV deleted."
          else
            echo "No existing GitHub release found for tag $TAG_NAME_ENV."
          fi

          echo "Deleting local tag $TAG_NAME_ENV if it exists..."
          git tag -d "$TAG_NAME_ENV" || true # Suppress error if tag doesn't exist
          echo "Deleting remote tag $TAG_NAME_ENV if it exists..."
          git push origin --delete "$TAG_NAME_ENV" || true # Suppress error if tag doesn't exist on remote

          echo "Creating and pushing new tag $TAG_NAME_ENV..."
          git tag "$TAG_NAME_ENV"
          git push origin "$TAG_NAME_ENV"

      - name: Create and Push Git Tag (on version change push)
        if: steps.get_version_info.outputs.should_release == 'true' && github.event_name == 'push'
        env:
          TAG_NAME_ENV: ${{ steps.get_version_info.outputs.tag_name }}
        run: |
          echo "Push event: Creating and pushing new tag $TAG_NAME_ENV"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$TAG_NAME_ENV" # This will fail if the tag already exists locally (good for new versions)
          git push origin "$TAG_NAME_ENV" # This will fail if the tag exists on remote and points to a different commit

  # --- Build Jobs (Parallel) ---
  build_linux:
    name: Build Linux (x64)
    needs: determine_release_action
    if: needs.determine_release_action.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build Linux executable
        run: npm run build-linux
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: a1-evo-acoustica-linux
          path: ./a1-evo-acoustica-linux
          if-no-files-found: error

  build_macos_x64:
    name: Build macOS (x64 Intel)
    needs: determine_release_action
    if: needs.determine_release_action.outputs.should_release == 'true'
    runs-on: macos-13
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build macOS x64 executable
        run: npm run build-macos-x64
      - name: Ad-hoc sign macOS x64 executable
        run: codesign --force --deep --sign - ./a1-evo-acoustica-macos-x64
      - name: Upload macOS x64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: a1-evo-acoustica-macos-x64
          path: ./a1-evo-acoustica-macos-x64
          if-no-files-found: error

  build_macos_arm64:
    name: Build macOS (ARM64 Apple Silicon)
    needs: determine_release_action
    if: needs.determine_release_action.outputs.should_release == 'true'
    runs-on: macos-14
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build macOS arm64 executable
        run: npm run build-macos-arm64
      - name: Ad-hoc sign macOS arm64 executable
        run: codesign --force --deep --sign - ./a1-evo-acoustica-macos-arm64
      - name: Upload macOS arm64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: a1-evo-acoustica-macos-arm64
          path: ./a1-evo-acoustica-macos-arm64
          if-no-files-found: error

  build_windows:
    name: Build Windows (x64)
    needs: determine_release_action
    if: needs.determine_release_action.outputs.should_release == 'true'
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build Windows executable
        run: npm run build-windows
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: a1-evo-acoustica-win-x64.exe
          path: ./a1-evo-acoustica-win-x64.exe
          if-no-files-found: error

  publish_release:
    name: Publish Release
    needs:
      - determine_release_action
      - build_linux
      - build_macos_x64
      - build_macos_arm64
      - build_windows
    if: needs.determine_release_action.outputs.should_release == 'true' # Only run if a release is determined to be necessary
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded files for verification
        run: ls -R ./artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.determine_release_action.outputs.tag_name }}
          release_name: Release ${{ needs.determine_release_action.outputs.tag_name }}
          body: |
            Automated release for version ${{ needs.determine_release_action.outputs.new_version }}
            Triggered by: ${{ github.event_name }}
            Commit: ${{ needs.determine_release_action.outputs.commit_sha }}

            Contains Linux, MacOS (x64, arm64), and Windows (x64) executables.
          draft: false
          prerelease: false

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/a1-evo-acoustica-linux/a1-evo-acoustica-linux
          asset_name: a1-evo-acoustica-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS x64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/a1-evo-acoustica-macos-x64/a1-evo-acoustica-macos-x64
          asset_name: a1-evo-acoustica-macos-x64
          asset_content_type: application/octet-stream

      - name: Upload macOS arm64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/a1-evo-acoustica-macos-arm64/a1-evo-acoustica-macos-arm64
          asset_name: a1-evo-acoustica-macos-arm64
          asset_content_type: application/octet-stream

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/a1-evo-acoustica-win-x64.exe/a1-evo-acoustica-win-x64.exe
          asset_name: a1-evo-acoustica-win-x64.exe
          asset_content_type: application/vnd.microsoft.portable-executable
