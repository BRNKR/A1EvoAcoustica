name: Smart Auto-Release (Detects Skip Patterns)

on:
  push:
    branches: [ main ]
    paths:
      - 'main.js'
      - 'A1Evo.html'
      - 'webWorker.js'
      - 'package.json'
      - '*.js'
      - '*.html'

jobs:
  smart-release-check:
    runs-on: ubuntu-latest
    # Skip if it's a workflow commit or contains skip patterns
    if: >
      !contains(github.event.head_commit.message, 'Release v') &&
      !contains(github.event.head_commit.message, 'Auto-release v') &&
      !contains(github.event.head_commit.message, '[skip-release]') &&
      !contains(github.event.head_commit.message, '[no-release]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      github.actor != 'github-actions[bot]'

    outputs:
      should_release: ${{ steps.analysis.outputs.should_release }}
      release_type: ${{ steps.analysis.outputs.release_type }}
      commit_message: ${{ steps.analysis.outputs.commit_message }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 5

    - name: Analyze changes and decide release
      id: analysis
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"

        # Properly encode commit message for GitHub Output
        {
          echo "commit_message<<EOF"
          echo "$COMMIT_MSG"
          echo "EOF"
        } >> $GITHUB_OUTPUT

        # Get changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "üìÅ Changed files:"
        echo "$CHANGED_FILES"

        # Default to no release
        SHOULD_RELEASE="false"
        RELEASE_TYPE="patch"

        # Check for important file changes
        IMPORTANT_CHANGES=""
        if echo "$CHANGED_FILES" | grep -q "main.js"; then
          IMPORTANT_CHANGES="$IMPORTANT_CHANGES main.js"
        fi
        if echo "$CHANGED_FILES" | grep -q "A1Evo.html"; then
          IMPORTANT_CHANGES="$IMPORTANT_CHANGES A1Evo.html"
        fi
        if echo "$CHANGED_FILES" | grep -q "webWorker.js"; then
          IMPORTANT_CHANGES="$IMPORTANT_CHANGES webWorker.js"
        fi
        if echo "$CHANGED_FILES" | grep -qE '\.(js|html)$'; then
          IMPORTANT_CHANGES="$IMPORTANT_CHANGES other-js/html"
        fi

        # Analyze commit message patterns
        if [[ "$COMMIT_MSG" =~ ^Add\ files\ via\ upload$ ]] || \
           [[ "$COMMIT_MSG" =~ ^Add\ files\ via\ upload ]] || \
           [[ "$COMMIT_MSG" =~ ^Update.*\.(js|html)$ ]] || \
           [[ "$COMMIT_MSG" =~ ^Fix ]] || \
           [[ "$COMMIT_MSG" =~ ^fix ]] || \
           [[ "$COMMIT_MSG" =~ ^Bugfix ]] || \
           [[ "$COMMIT_MSG" =~ ^Minor ]] || \
           [[ "$COMMIT_MSG" =~ ^Small ]]; then

          if [ -n "$IMPORTANT_CHANGES" ]; then
            SHOULD_RELEASE="true"
            echo "‚úÖ Auto-release triggered"
            echo "   Reason: Important files changed ($IMPORTANT_CHANGES)"
            echo "   Pattern: $COMMIT_MSG"
          fi
        fi

        # Check for major changes that should be manual
        if echo "$CHANGED_FILES" | grep -q "package.json" && \
           echo "$CHANGED_FILES" | wc -l | awk '{print ($1 > 3)}' | grep -q 1; then
          echo "‚ö†Ô∏è Major changes detected - recommend manual release"
          SHOULD_RELEASE="false"
        fi

        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

        echo "ü§ñ Auto-release decision: $SHOULD_RELEASE"
        if [ "$SHOULD_RELEASE" = "true" ]; then
          echo "üìã Will auto-increment patch version"
        else
          echo "üìã Use manual workflow for this release"
        fi

  auto-patch-release:
    needs: smart-release-check
    runs-on: ubuntu-latest
    if: needs.smart-release-check.outputs.should_release == 'true'

    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"

    - name: Calculate next version
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        COMMIT_MSG="${{ needs.smart-release-check.outputs.commit_message }}"

        # Check if commit message contains a version number
        VERSION_IN_COMMIT=""
        if [[ "$COMMIT_MSG" =~ [vV]?([0-9]+)(\.[0-9]+)? ]]; then
          VERSION_IN_COMMIT="${BASH_REMATCH[1]}"
          if [ -n "${BASH_REMATCH[2]}" ]; then
            VERSION_IN_COMMIT="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
          fi
          echo "üìã Found version in commit: $VERSION_IN_COMMIT"
        fi

        # Smart version increment
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        if [ -n "$VERSION_IN_COMMIT" ]; then
          if [[ "$VERSION_IN_COMMIT" =~ ^([0-9]+)\.([0-9]+)$ ]]; then
            NEW_VERSION="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
          else
            NEW_VERSION="$VERSION_IN_COMMIT.0"
          fi
          IS_MAJOR_RELEASE="true"
        else
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          if [ "$NEW_PATCH" = "1" ] || [ "$NEW_PATCH" = "2" ]; then
            IS_MAJOR_RELEASE="true"
          else
            IS_MAJOR_RELEASE="false"
          fi
        fi

        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "is_major_release=$IS_MAJOR_RELEASE" >> $GITHUB_OUTPUT

        echo "üìà Smart auto-increment:"
        echo "  From: $CURRENT_VERSION"
        echo "  To:   $NEW_VERSION"
        if [ -n "$VERSION_IN_COMMIT" ]; then
          echo "  Type: Version from commit message"
        else
          echo "  Type: Patch increment"
        fi
        echo "  Major release: $IS_MAJOR_RELEASE"

    - name: Update versions everywhere
      run: |
        NEW_VERSION="${{ steps.version.outputs.new }}"
        echo "üîÑ Updating version to $NEW_VERSION in all files..."

        # Update package.json
        npm version $NEW_VERSION --no-git-tag-version

        # Update main.js - multiple patterns
        if [ -f "main.js" ]; then
          sed -i "s/const version = ['\''\"]*[^'\''\"]*['\''\"]/const version = '$NEW_VERSION'/g" main.js
          sed -i "s/var version = ['\''\"]*[^'\''\"]*['\''\"]/var version = '$NEW_VERSION'/g" main.js
          sed -i "s/let version = ['\''\"]*[^'\''\"]*['\''\"]/let version = '$NEW_VERSION'/g" main.js
          sed -i "s/version = ['\''\"]*[^'\''\"]*['\''\"]/version = '$NEW_VERSION'/g" main.js
          sed -i "s/const evoVersion = ['\''\"]*[^'\''\"]*['\''\"]/const evoVersion = '$NEW_VERSION'/g" main.js
          sed -i "s/var evoVersion = ['\''\"]*[^'\''\"]*['\''\"]/var evoVersion = '$NEW_VERSION'/g" main.js
          sed -i "s/let evoVersion = ['\''\"]*[^'\''\"]*['\''\"]/let evoVersion = '$NEW_VERSION'/g" main.js
          sed -i "s/evoVersion = ['\''\"]*[^'\''\"]*['\''\"]/evoVersion = '$NEW_VERSION'/g" main.js
          echo "‚úÖ Updated main.js"
        fi

        # Update A1Evo.html
        if [ -f "A1Evo.html" ]; then
          sed -i "s/evoVersion = ['\''\"]*[^'\''\"]*['\''\"]/evoVersion = '$NEW_VERSION'/g" A1Evo.html
          sed -i "s/const evoVersion = ['\''\"]*[^'\''\"]*['\''\"]/const evoVersion = '$NEW_VERSION'/g" A1Evo.html
          sed -i "s/var evoVersion = ['\''\"]*[^'\''\"]*['\''\"]/var evoVersion = '$NEW_VERSION'/g" A1Evo.html
          echo "‚úÖ Updated A1Evo.html"
        fi

        # Update webWorker.js if it exists
        if [ -f "webWorker.js" ]; then
          sed -i "s/version = ['\''\"]*[^'\''\"]*['\''\"]/version = '$NEW_VERSION'/g" webWorker.js
          echo "‚úÖ Updated webWorker.js"
        fi

    - name: Generate smart release notes
      run: |
        NEW_VERSION="${{ steps.version.outputs.new }}"
        CURRENT_VERSION="${{ steps.version.outputs.current }}"
        COMMIT_MSG="${{ needs.smart-release-check.outputs.commit_message }}"

        # Detect if we have a meaningful commit message vs generic upload
        IS_GENERIC_UPLOAD="false"
        if [[ "$COMMIT_MSG" == "Add files via upload" ]] || \
           [[ "$COMMIT_MSG" =~ ^Add\ files\ via\ upload$ ]] || \
           [[ "$COMMIT_MSG" =~ ^Update\ .+\.(js|html)$ ]]; then
          IS_GENERIC_UPLOAD="true"
        fi

        {
          echo "## ü§ñ A1 Evo Acoustica v$NEW_VERSION"
          echo ""
          if [ "$IS_GENERIC_UPLOAD" = "true" ]; then
            echo "### üîÑ Automatic Update"
            echo "Files were updated and automatically released as patch version."
            echo ""
            echo "**Modified Files**: $(git diff --name-only HEAD~1 HEAD | tr '\n' ', ' | sed 's/,$//')"
          else
            echo "### ‚ú® What's New"
            echo "**$COMMIT_MSG**"
            echo ""
            echo "This release was automatically created based on the above changes."
            echo ""
            echo "### üìÅ Updated Files"
            git diff --name-only HEAD~1 HEAD | sed 's/^/- /'
          fi
          echo ""
          echo "### üìã Recent Development Activity"
          git log v$CURRENT_VERSION..HEAD --pretty=format:"- %s" --no-merges 2>/dev/null | head -5 || git log --pretty=format:"- %s" --no-merges -5
          echo ""
          echo "### üì¶ Cross-Platform Downloads"
          echo "- **üêß Linux**: \`a1-evo-acoustica-linux\`"
          echo "- **üçé macOS (Intel)**: \`a1-evo-acoustica-macos-x64\`"
          echo "- **üçé macOS (Apple Silicon)**: \`a1-evo-acoustica-macos-arm64\`"
          echo "- **ü™ü Windows**: \`a1-evo-acoustica-win-x64.exe\`"
          echo ""
          echo "All executables include SHA256 checksums for verification."
          echo ""
          echo "### üöÄ Next Steps"
          echo "- For custom release notes, use the **\"Create Release with Manual Version\"** workflow"
          echo "- To skip auto-releases, add \`[skip-release]\` to commit messages"
          echo "- For major versions, trigger manual releases"
          echo ""
          echo "---"
          echo "*Auto-generated release ‚Ä¢ [View Manual Release Options](../../actions/workflows/release.yml)*"
        } > release_notes.md

    - name: Build and package
      run: |
        echo "üì¶ Installing dependencies..."
        npm ci

        echo "üî® Building v${{ steps.version.outputs.new }} executables..."
        npm run build

        # Create organized distribution
        mkdir -p dist
        BUILD_SUCCESS=true

        for file in a1-evo-acoustica-*; do
          if [ -f "$file" ]; then
            echo "üì¶ Packaging: $file"
            sha256sum "$file" > "${file}.sha256"
            mv "$file" "dist/"
            mv "${file}.sha256" "dist/"
          else
            echo "‚ö†Ô∏è Expected executable not found: $file"
            BUILD_SUCCESS=false
          fi
        done

        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "‚úÖ All executables built successfully"
          ls -la dist/
        else
          echo "‚ùå Some builds failed"
          exit 1
        fi

    - name: Commit and tag
      run: |
        NEW_VERSION="${{ steps.version.outputs.new }}"

        # Stage all version changes
        git add package.json package-lock.json
        [ -f "main.js" ] && git add main.js
        [ -f "A1Evo.html" ] && git add A1Evo.html
        [ -f "webWorker.js" ] && git add webWorker.js

        # Commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -m "ü§ñ Auto-release v$NEW_VERSION - Automatically incremented patch version from trigger: ${{ needs.smart-release-check.outputs.commit_message }} | Previous: ${{ steps.version.outputs.current }} ‚Üí Current: $NEW_VERSION [skip-release]"
          git push origin main
          echo "‚úÖ Committed version changes"
        fi

        # Create and push tag
        git tag -a "v$NEW_VERSION" -m "ü§ñ Auto-release v$NEW_VERSION - Automated patch release triggered by file updates. Built executables for all supported platforms."
        git push origin "v$NEW_VERSION"
        echo "‚úÖ Tagged v$NEW_VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.new }}
        name: ü§ñ A1 Evo Acoustica v${{ steps.version.outputs.new }}
        body_path: release_notes.md
        files: |
          dist/*
        prerelease: false
        draft: false
        make_latest: ${{ steps.version.outputs.is_major_release }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Success summary
      run: |
        NEW_VERSION="${{ steps.version.outputs.new }}"
        echo "üéâ Auto-release v$NEW_VERSION completed!"
        echo ""
        echo "üìä Release Summary:"
        echo "‚îú‚îÄ Trigger: ${{ needs.smart-release-check.outputs.commit_message }}"
        echo "‚îú‚îÄ Version: ${{ steps.version.outputs.current }} ‚Üí $NEW_VERSION"
        echo "‚îú‚îÄ Type: Automatic patch increment"
        echo "‚îú‚îÄ Is Major Release: ${{ steps.version.outputs.is_major_release }}"
        echo "‚îú‚îÄ Executables: ‚úÖ Built for all platforms"
        echo "‚îî‚îÄ Release: https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION"
        echo ""
        echo "üí° Pro Tips:"
        echo "‚Ä¢ Add '[skip-release]' to commit messages to prevent auto-releases"
        echo "‚Ä¢ Use manual workflow for major versions or custom release notes"
        echo "‚Ä¢ Next suggested versions: $NEW_VERSION ‚Üí $(echo $NEW_VERSION | awk -F. '{print $1"."$2"."($3+1)}')"