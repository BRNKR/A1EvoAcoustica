name: Build A1 Evo Acoustica Tool

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [ main, master ] # Adjust branch names if needed
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }}

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Using Node 18 LTS
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci # Use clean install based on package-lock.json

      - name: üõ†Ô∏è Build Executables with pkg
        # Ensure package.json's build script targets win-x64, linux-x64, macos-x64, macos-arm64
        run: npm run build

      - name: üì¶ Prepare Artifacts
        # Use bash shell consistently across runners
        shell: bash
        run: |
          # Create a directory to stage artifacts
          echo "Creating staging directory..."
          mkdir staging

          # Define the base output name from package.json's build script
          OUTPUT_BASE="a1-evo-acoustica"

          # Move executables based on OS - using bash syntax
          echo "Moving executables for ${{ matrix.os }}..."

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ -f ./${OUTPUT_BASE}-win.exe ]; then # Default name pkg usually uses
              mv ./${OUTPUT_BASE}-win.exe ./staging/
            elif [ -f ./${OUTPUT_BASE}-win-x64.exe ]; then # Alternative name pkg might use
              mv ./${OUTPUT_BASE}-win-x64.exe ./staging/${OUTPUT_BASE}-win.exe
            else
               echo "::warning::Windows executable not found with expected names."
            fi

          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            if [ -f ./$OUTPUT_BASE ]; then # pkg often uses base name for linux x64
              mv ./$OUTPUT_BASE ./staging/${OUTPUT_BASE}-linux-x64
            elif [ -f ./${OUTPUT_BASE}-linux ]; then # Alternative name
               mv ./${OUTPUT_BASE}-linux ./staging/${OUTPUT_BASE}-linux-x64
            elif [ -f ./${OUTPUT_BASE}-linux-x64 ]; then # Specific name
              mv ./${OUTPUT_BASE}-linux-x64 ./staging/
            else
               echo "::warning::Linux executable not found with expected names."
            fi

          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            # Check for both macOS architectures
            moved_macos=false
            if [ -f ./${OUTPUT_BASE}-macos-x64 ]; then
              mv ./${OUTPUT_BASE}-macos-x64 ./staging/
              moved_macos=true
            fi
            if [ -f ./${OUTPUT_BASE}-macos-arm64 ]; then
              mv ./${OUTPUT_BASE}-macos-arm64 ./staging/
              moved_macos=true
            fi
            # Fallback if only base name exists
            if [ "$moved_macos" = false ] && [ -f ./${OUTPUT_BASE}-macos ]; then
               echo "Moving macOS fallback (assuming x64)..."
               mv ./${OUTPUT_BASE}-macos ./staging/${OUTPUT_BASE}-macos-x64
            elif [ "$moved_macos" = false ]; then
                echo "::warning::macOS executables (x64 or arm64) not found with expected names."
            fi
          else
            echo "::error::Unknown OS for artifact moving: ${{ matrix.os }}"
            exit 1
          fi

          # Verify staging directory contents
          echo "Staging directory contents:"
          ls -l staging

      - name: üì§ Upload Artifact (${{ matrix.os }})
        uses: actions/upload-artifact@v4
        with:
          # Create a distinct artifact name for each OS build
          name: a1-evo-acoustica-${{ matrix.os }}
          # Upload the contents of the staging directory
          path: staging/
