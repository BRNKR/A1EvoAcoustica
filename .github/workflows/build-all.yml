name: Build A1 Evo Acoustica Tool (Linux & macOS) # Updated workflow name

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [ main, master ] # Runs on pushes to these branches
  pull_request:
    branches: [ main, master ] # Runs on PRs targeting these branches

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # *** REMOVED windows-latest from the matrix ***
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} (Node 18)

    # No need for the env block if Windows isn't running
    # env:
    #   NODE_DEBUG: child_process
    #   DEBUG: pkg*

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Set up Node.js v18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üõ†Ô∏è Build Executables with pkg
        # This runs the 'build' script from package.json
        # That script should still list all targets, pkg will just ignore the Windows one when run on Linux/macOS
        run: npm run build

      - name: üìú List Files After Build
        shell: bash
        run: ls -l

      - name: üì¶ Prepare Artifacts
        shell: bash
        run: |
          echo "Creating staging directory..."
          mkdir staging
          OUTPUT_BASE="a1-evo-acoustica" # Should match --output in package.json
          TARGET_DIR="./staging"
          EXE_FOUND=false # Flag

          echo "Moving executables for ${{ matrix.os }}..."

          # --- REMOVED Windows block ---

          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
             echo "Looking for Linux executable..."
             if [ -f ./$OUTPUT_BASE ]; then mv ./$OUTPUT_BASE ${TARGET_DIR}/${OUTPUT_BASE}-linux-x64; EXE_FOUND=true; echo "Moved $OUTPUT_BASE";
             elif [ -f ./${OUTPUT_BASE}-linux ]; then mv ./${OUTPUT_BASE}-linux ${TARGET_DIR}/${OUTPUT_BASE}-linux-x64; EXE_FOUND=true; echo "Moved ${OUTPUT_BASE}-linux";
             elif [ -f ./${OUTPUT_BASE}-linux-x64 ]; then mv ./${OUTPUT_BASE}-linux-x64 ${TARGET_DIR}/; EXE_FOUND=true; echo "Moved ${OUTPUT_BASE}-linux-x64";
             fi

          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
             echo "Looking for macOS executables..."
             # Note: pkg on macOS runner should create both arch files correctly if listed in targets
             if [ -f ./${OUTPUT_BASE}-macos-x64 ]; then mv ./${OUTPUT_BASE}-macos-x64 ${TARGET_DIR}/; EXE_FOUND=true; echo "Moved ${OUTPUT_BASE}-macos-x64";
             fi
             if [ -f ./${OUTPUT_BASE}-macos-arm64 ]; then mv ./${OUTPUT_BASE}-macos-arm64 ${TARGET_DIR}/; EXE_FOUND=true; echo "Moved ${OUTPUT_BASE}-macos-arm64"; # EXE_FOUND intentionally overwritten if arm exists
             fi
             # Remove fallback - we expect specific arch files on macOS runner
             # if [ "$EXE_FOUND" = false ] && [ -f ./${OUTPUT_BASE}-macos ]; then ...
          else
            echo "::error::Unexpected OS for artifact moving: ${{ matrix.os }}"
            exit 1
          fi

          # Final Check
          if [ "$EXE_FOUND" = false ]; then
            echo "::error::No executable found to move for ${{ matrix.os }} with base name ${OUTPUT_BASE}"
            echo "Files present after build:"
            ls -l ./
            exit 1
          else
             echo "Staging directory contents:"
             ls -l ${TARGET_DIR}
          fi

      - name: üì§ Upload Artifact (${{ matrix.os }})
        uses: actions/upload-artifact@v4
        with:
          name: a1-evo-acoustica-${{ matrix.os }}
          path: staging/
