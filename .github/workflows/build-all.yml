name: Build A1 Evo Acoustica Tool (All Platforms)

on:
  workflow_dispatch: # Manual trigger
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }} (Node 18)

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Set up Node.js v18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üõ†Ô∏è Build Executables with pkg
        run: npm run build

      - name: üì¶ Prepare Artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -Force staging
          if (Test-Path -Path ./a1-evo-acoustica-win.exe) {
            Move-Item -Path ./a1-evo-acoustica-win.exe -Destination ./staging/
            Write-Output "‚úÖ Moved Windows EXE"
          } else {
            Write-Error "Windows executable not found!"
            ls
            exit 1
          }
        shell: pwsh

      - name: üì¶ Prepare Artifacts (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir staging
          OUTPUT_BASE="a1-evo-acoustica"
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "Looking for Linux executable..."
            if [ -f ./${OUTPUT_BASE}-linux ]; then mv ./${OUTPUT_BASE}-linux staging/${OUTPUT_BASE}-linux-x64
            elif [ -f ./${OUTPUT_BASE}-linux-x64 ]; then mv ./${OUTPUT_BASE}-linux-x64 staging/
            else
              echo "::error::Linux executable not found!"
              ls -l
              exit 1
            fi
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "Looking for macOS executables..."
            if [ -f ./${OUTPUT_BASE}-macos-x64 ]; then mv ./${OUTPUT_BASE}-macos-x64 staging/
            fi
            if [ -f ./${OUTPUT_BASE}-macos-arm64 ]; then mv ./${OUTPUT_BASE}-macos-arm64 staging/
            fi
            if [ ! -f staging/${OUTPUT_BASE}-macos-x64 ] && [ ! -f staging/${OUTPUT_BASE}-macos-arm64 ]; then
              echo "::error::No macOS executables found!"
              ls -l
              exit 1
            fi
          fi
          echo "‚úÖ Unix staging contents:"
          ls -l staging

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: a1-evo-acoustica-${{ matrix.os }}
          path: staging/
